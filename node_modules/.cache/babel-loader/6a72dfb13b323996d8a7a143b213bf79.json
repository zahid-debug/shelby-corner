{"ast":null,"code":"const initialState = {\n  basket: []\n};\n\nconst Basket = (state = initialState, action) => {\n  switch (action.type) {\n    case \"add\":\n      return { ...state,\n        basket: [...state.basket, action.items.item]\n      };\n\n    case \"remove\":\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n      console.log(index);\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(` Can't remove the product (id: ${action.id}) as its not in basket!`);\n      }\n\n      console.log(newBasket);\n      return { ...state,\n        basket: newBasket\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = Basket;\nexport default Basket;\n\nvar _c;\n\n$RefreshReg$(_c, \"Basket\");","map":{"version":3,"sources":["E:/shelby creation/src/reducers/addRemove.js"],"names":["initialState","basket","Basket","state","action","type","items","item","index","findIndex","basketItem","id","console","log","newBasket","splice","warn"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE;AADS,CAArB;;AAIA,MAAMC,MAAM,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAC7C,UAASA,MAAM,CAACC,IAAhB;AACI,SAAK,KAAL;AAAY,aAAO,EAAE,GAAGF,KAAL;AAAYF,QAAAA,MAAM,EAAE,CAAC,GAAGE,KAAK,CAACF,MAAV,EAAkBG,MAAM,CAACE,KAAP,CAAaC,IAA/B;AAApB,OAAP;;AACZ,SAAK,QAAL;AACI,YAAMC,KAAK,GAAGL,KAAK,CAACF,MAAN,CAAaQ,SAAb,CAAwBC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBP,MAAM,CAACO,EAAhE,CAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,UAAIM,SAAS,GAAG,CAAC,GAAGX,KAAK,CAACF,MAAV,CAAhB;;AACA,UAAIO,KAAK,IAAI,CAAb,EAAgB;AACZM,QAAAA,SAAS,CAACC,MAAV,CAAiBP,KAAjB,EAAwB,CAAxB;AACH,OAFD,MAGK;AACDI,QAAAA,OAAO,CAACI,IAAR,CAAc,kCAAiCZ,MAAM,CAACO,EAAG,yBAAzD;AACH;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AACA,aAAO,EAAC,GAAGX,KAAJ;AAAWF,QAAAA,MAAM,EAAEa;AAAnB,OAAP;;AACJ;AAAS,aAAOX,KAAP;AAdb;AAgBH,CAjBD;;KAAMD,M;AAmBN,eAAeA,MAAf","sourcesContent":["const initialState = {\n    basket: [],\n}\n\nconst Basket = (state = initialState, action) => {\n    switch ((action.type)) {\n        case \"add\": return { ...state, basket: [...state.basket, action.items.item], }\n        case \"remove\":\n            const index = state.basket.findIndex((basketItem) => basketItem.id === action.id)\n            console.log(index)\n            let newBasket = [...state.basket];\n            if (index >= 0) {\n                newBasket.splice(index, 1);\n            }\n            else {\n                console.warn(` Can't remove the product (id: ${action.id}) as its not in basket!`)\n            }\n            console.log(newBasket)\n            return {...state, basket: newBasket}\n        default: return state \n    }\n}\n\nexport default Basket;"]},"metadata":{},"sourceType":"module"}